{
  "version": 3,
  "sources": ["../bundle-v8KeRJ/checked-fetch.js", "../../../../../AppData/Local/Yarn/Data/global/node_modules/wrangler/templates/middleware/common.ts", "../../../../../AppData/Local/Yarn/Data/global/node_modules/wrangler/templates/middleware/loader-sw.ts", "../../../../../AppData/Local/Yarn/Data/global/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../../../AppData/Local/Yarn/Data/global/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-v8KeRJ/middleware-insertion-facade.js", "../../../workers/index.js"],
  "sourceRoot": "C:\\Users\\class\\webflow-apps\\webflow-app-template-react\\.wrangler\\tmp\\dev-ydJTLE",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "import {\n\t__facade_invoke__,\n\t__facade_register__,\n\t__facade_registerInternal__,\n\tAwaitable,\n\tDispatcher,\n\tIncomingRequest,\n\tMiddleware,\n} from \"./common\";\n\nexport { __facade_register__, __facade_registerInternal__ };\n\n// Miniflare 2's `EventTarget` follows the spec and doesn't allow exceptions to\n// be caught by `dispatchEvent`. Instead it has a custom `ThrowingEventTarget`\n// class that rethrows errors from event listeners in `dispatchEvent`.\n// We'd like errors to be propagated to the top-level `addEventListener`, so\n// we'd like to use `ThrowingEventTarget`. Unfortunately, `ThrowingEventTarget`\n// isn't exposed on the global scope, but `WorkerGlobalScope` (which extends\n// `ThrowingEventTarget`) is. Therefore, we get at it in this nasty way.\nlet __FACADE_EVENT_TARGET__: EventTarget;\nif ((globalThis as any).MINIFLARE) {\n\t__FACADE_EVENT_TARGET__ = new (Object.getPrototypeOf(WorkerGlobalScope))();\n} else {\n\t__FACADE_EVENT_TARGET__ = new EventTarget();\n}\n\nfunction __facade_isSpecialEvent__(\n\ttype: string\n): type is \"fetch\" | \"scheduled\" {\n\treturn type === \"fetch\" || type === \"scheduled\";\n}\nconst __facade__originalAddEventListener__ = globalThis.addEventListener;\nconst __facade__originalRemoveEventListener__ = globalThis.removeEventListener;\nconst __facade__originalDispatchEvent__ = globalThis.dispatchEvent;\n\nglobalThis.addEventListener = function (type, listener, options) {\n\tif (__facade_isSpecialEvent__(type)) {\n\t\t__FACADE_EVENT_TARGET__.addEventListener(\n\t\t\ttype,\n\t\t\tlistener as EventListenerOrEventListenerObject,\n\t\t\toptions\n\t\t);\n\t} else {\n\t\t__facade__originalAddEventListener__(type, listener, options);\n\t}\n};\nglobalThis.removeEventListener = function (type, listener, options) {\n\tif (__facade_isSpecialEvent__(type)) {\n\t\t__FACADE_EVENT_TARGET__.removeEventListener(\n\t\t\ttype,\n\t\t\tlistener as EventListenerOrEventListenerObject,\n\t\t\toptions\n\t\t);\n\t} else {\n\t\t__facade__originalRemoveEventListener__(type, listener, options);\n\t}\n};\nglobalThis.dispatchEvent = function (event) {\n\tif (__facade_isSpecialEvent__(event.type)) {\n\t\treturn __FACADE_EVENT_TARGET__.dispatchEvent(event);\n\t} else {\n\t\treturn __facade__originalDispatchEvent__(event);\n\t}\n};\n\ndeclare global {\n\tvar addMiddleware: typeof __facade_register__;\n\tvar addMiddlewareInternal: typeof __facade_registerInternal__;\n}\nglobalThis.addMiddleware = __facade_register__;\nglobalThis.addMiddlewareInternal = __facade_registerInternal__;\n\nconst __facade_waitUntil__ = Symbol(\"__facade_waitUntil__\");\nconst __facade_response__ = Symbol(\"__facade_response__\");\nconst __facade_dispatched__ = Symbol(\"__facade_dispatched__\");\n\nclass __Facade_ExtendableEvent__ extends Event {\n\t[__facade_waitUntil__]: Awaitable<unknown>[] = [];\n\n\twaitUntil(promise: Awaitable<any>) {\n\t\tif (!(this instanceof __Facade_ExtendableEvent__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\tthis[__facade_waitUntil__].push(promise);\n\t}\n}\n\ninterface FetchEventInit extends EventInit {\n\trequest: Request;\n\tpassThroughOnException: FetchEvent[\"passThroughOnException\"];\n}\n\nclass __Facade_FetchEvent__ extends __Facade_ExtendableEvent__ {\n\t#request: Request;\n\t#passThroughOnException: FetchEvent[\"passThroughOnException\"];\n\t[__facade_response__]?: Awaitable<Response>;\n\t[__facade_dispatched__] = false;\n\n\tconstructor(type: \"fetch\", init: FetchEventInit) {\n\t\tsuper(type);\n\t\tthis.#request = init.request;\n\t\tthis.#passThroughOnException = init.passThroughOnException;\n\t}\n\n\tget request() {\n\t\treturn this.#request;\n\t}\n\n\trespondWith(response: Awaitable<Response>) {\n\t\tif (!(this instanceof __Facade_FetchEvent__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\tif (this[__facade_response__] !== undefined) {\n\t\t\tthrow new DOMException(\n\t\t\t\t\"FetchEvent.respondWith() has already been called; it can only be called once.\",\n\t\t\t\t\"InvalidStateError\"\n\t\t\t);\n\t\t}\n\t\tif (this[__facade_dispatched__]) {\n\t\t\tthrow new DOMException(\n\t\t\t\t\"Too late to call FetchEvent.respondWith(). It must be called synchronously in the event handler.\",\n\t\t\t\t\"InvalidStateError\"\n\t\t\t);\n\t\t}\n\t\tthis.stopImmediatePropagation();\n\t\tthis[__facade_response__] = response;\n\t}\n\n\tpassThroughOnException() {\n\t\tif (!(this instanceof __Facade_FetchEvent__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#passThroughOnException();\n\t}\n}\n\ninterface ScheduledEventInit extends EventInit {\n\tscheduledTime: number;\n\tcron: string;\n\tnoRetry: ScheduledEvent[\"noRetry\"];\n}\n\nclass __Facade_ScheduledEvent__ extends __Facade_ExtendableEvent__ {\n\t#scheduledTime: number;\n\t#cron: string;\n\t#noRetry: ScheduledEvent[\"noRetry\"];\n\n\tconstructor(type: \"scheduled\", init: ScheduledEventInit) {\n\t\tsuper(type);\n\t\tthis.#scheduledTime = init.scheduledTime;\n\t\tthis.#cron = init.cron;\n\t\tthis.#noRetry = init.noRetry;\n\t}\n\n\tget scheduledTime() {\n\t\treturn this.#scheduledTime;\n\t}\n\n\tget cron() {\n\t\treturn this.#cron;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledEvent__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\n__facade__originalAddEventListener__(\"fetch\", (event) => {\n\tconst ctx: ExecutionContext = {\n\t\twaitUntil: event.waitUntil.bind(event),\n\t\tpassThroughOnException: event.passThroughOnException.bind(event),\n\t};\n\n\tconst __facade_sw_dispatch__: Dispatcher = function (type, init) {\n\t\tif (type === \"scheduled\") {\n\t\t\tconst facadeEvent = new __Facade_ScheduledEvent__(\"scheduled\", {\n\t\t\t\tscheduledTime: Date.now(),\n\t\t\t\tcron: init.cron ?? \"\",\n\t\t\t\tnoRetry() {},\n\t\t\t});\n\n\t\t\t__FACADE_EVENT_TARGET__.dispatchEvent(facadeEvent);\n\t\t\tevent.waitUntil(Promise.all(facadeEvent[__facade_waitUntil__]));\n\t\t}\n\t};\n\n\tconst __facade_sw_fetch__: Middleware = function (request, _env, ctx) {\n\t\tconst facadeEvent = new __Facade_FetchEvent__(\"fetch\", {\n\t\t\trequest,\n\t\t\tpassThroughOnException: ctx.passThroughOnException,\n\t\t});\n\n\t\t__FACADE_EVENT_TARGET__.dispatchEvent(facadeEvent);\n\t\tfacadeEvent[__facade_dispatched__] = true;\n\t\tevent.waitUntil(Promise.all(facadeEvent[__facade_waitUntil__]));\n\n\t\tconst response = facadeEvent[__facade_response__];\n\t\tif (response === undefined) {\n\t\t\tthrow new Error(\"No response!\"); // TODO: proper error message\n\t\t}\n\t\treturn response;\n\t};\n\n\tevent.respondWith(\n\t\t__facade_invoke__(\n\t\t\tevent.request as IncomingRequest,\n\t\t\tglobalThis,\n\t\t\tctx,\n\t\t\t__facade_sw_dispatch__,\n\t\t\t__facade_sw_fetch__\n\t\t)\n\t);\n});\n\n__facade__originalAddEventListener__(\"scheduled\", (event) => {\n\tconst facadeEvent = new __Facade_ScheduledEvent__(\"scheduled\", {\n\t\tscheduledTime: event.scheduledTime,\n\t\tcron: event.cron,\n\t\tnoRetry: event.noRetry.bind(event),\n\t});\n\n\t__FACADE_EVENT_TARGET__.dispatchEvent(facadeEvent);\n\tevent.waitUntil(Promise.all(facadeEvent[__facade_waitUntil__]));\n});\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport { __facade_registerInternal__ } from \"C:\\\\Users\\\\class\\\\AppData\\\\Local\\\\Yarn\\\\Data\\\\global\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\loader-sw.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"C:\\\\Users\\\\class\\\\AppData\\\\Local\\\\Yarn\\\\Data\\\\global\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"C:\\\\Users\\\\class\\\\AppData\\\\Local\\\\Yarn\\\\Data\\\\global\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-miniflare3-json-error.ts\";\n\t\t\t\t__facade_registerInternal__([__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default])", "/**\r\n * SEO Copilot API Worker\r\n * This Cloudflare Worker handles API requests for the SEO Copilot Webflow extension\r\n * with integrated SEO analysis logic\r\n */\r\n\r\n// Define allowed domains for CORS\r\nconst allowedOrigins = [\r\n  'https://webflow.com', \r\n  'https://*.webflow-ext.com', \r\n  'https://*.webflow.io',\r\n  'http://localhost:1337',  // For local development\r\n  'http://localhost:5173'   // For Vite development server\r\n];\r\n\r\n// Create a pattern to test domains against\r\nconst createDomainPattern = (domain) => {\r\n  if (domain.includes('*')) {\r\n    return new RegExp('^' + domain.replace('*.', '([a-zA-Z0-9-]+\\\\.)?') + '$');\r\n  }\r\n  return new RegExp('^' + domain + '$');\r\n};\r\n\r\nconst originPatterns = allowedOrigins.map(createDomainPattern);\r\n\r\n// Check if origin is allowed\r\nconst isAllowedOrigin = (origin) => {\r\n  if (!origin) return false;\r\n  return originPatterns.some(pattern => pattern.test(origin));\r\n};\r\n\r\n// Handle CORS headers\r\nconst handleCors = (request) => {\r\n  const origin = request.headers.get('Origin');\r\n  \r\n  // If we don't have an origin or it's not in our allowed list, don't add CORS headers\r\n  if (!origin || !isAllowedOrigin(origin)) {\r\n    return new Response('Forbidden', { status: 403 });\r\n  }\r\n  \r\n  // Return CORS headers for preflight requests\r\n  if (request.method === 'OPTIONS') {\r\n    return new Response(null, {\r\n      status: 204,\r\n      headers: {\r\n        'Access-Control-Allow-Origin': origin,\r\n        'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\r\n        'Access-Control-Allow-Headers': 'Content-Type',\r\n        'Access-Control-Max-Age': '86400',\r\n      }\r\n    });\r\n  }\r\n  \r\n  // For regular requests, remember to add the origin to the response later\r\n  return null;\r\n};\r\n\r\n// =======================================\r\n// SEO ANALYSIS LOGIC\r\n// =======================================\r\n\r\n// Helper function to escape special characters in a string for use in a regular expression\r\nfunction escapeRegExp(string) {\r\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\r\n}\r\n\r\n// Helper function to calculate keyphrase density\r\nfunction calculateKeyphraseDensity(content, keyphrase) {\r\n  // Normalize content and keyphrase\r\n  const normalizedContent = content.toLowerCase().trim();\r\n  const normalizedKeyphrase = keyphrase.toLowerCase().trim();\r\n\r\n  // Escape special characters in the keyphrase\r\n  const escapedKeyphrase = escapeRegExp(normalizedKeyphrase);\r\n\r\n  // Count total words in content\r\n  const totalWords = normalizedContent.split(/\\s+/).filter(word => word.length > 0).length;\r\n\r\n  // Count non-overlapping occurrences of the keyphrase\r\n  const regex = new RegExp(`\\\\b${escapedKeyphrase}\\\\b`, 'gi');\r\n  const matches = normalizedContent.match(regex) || [];\r\n  const occurrences = matches.length;\r\n\r\n  // Calculate density as percentage\r\n  const density = (occurrences * (normalizedKeyphrase.split(/\\s+/).length)) / totalWords * 100;\r\n\r\n  return {\r\n    density,\r\n    occurrences,\r\n    totalWords\r\n  };\r\n}\r\n\r\n// Helper function to check if URL is a homepage\r\nfunction isHomePage(url) {\r\n  try {\r\n    const urlObj = new URL(url);\r\n    // Consider it a homepage if the path is \"/\" or empty, ignoring query parameters\r\n    return urlObj.pathname === \"/\" || urlObj.pathname === \"\";\r\n  } catch {\r\n    return false;\r\n  }\r\n}\r\n\r\n// Map of check titles to their SEO priority\r\nconst checkPriorities = {\r\n  \"Keyphrase in Title\": \"high\",\r\n  \"Keyphrase in Meta Description\": \"high\",\r\n  \"Keyphrase in URL\": \"medium\",\r\n  \"Content Length\": \"high\",\r\n  \"Keyphrase Density\": \"medium\",\r\n  \"Keyphrase in Introduction\": \"medium\",\r\n  \"Image Alt Attributes\": \"low\",\r\n  \"Internal Links\": \"medium\",\r\n  \"Outbound Links\": \"low\"\r\n};\r\n\r\n// Success messages for SEO checks\r\nfunction getSuccessMessage(checkType, url) {\r\n  const messages = {\r\n    \"Keyphrase in Title\": \"Great job! Your title includes the target keyphrase.\",\r\n    \"Keyphrase in Meta Description\": \"Perfect! Your meta description effectively uses the keyphrase.\",\r\n    \"Keyphrase in URL\": isHomePage(url) ? \"All good here, since it's the homepage! \u2728\" : \"Excellent! Your URL is SEO-friendly with the keyphrase.\",\r\n    \"Content Length\": \"Well done! Your content length is good for SEO.\",\r\n    \"Keyphrase Density\": \"Perfect! Your keyphrase density is within the optimal range.\",\r\n    \"Keyphrase in Introduction\": \"Excellent! You've included the keyphrase in your introduction.\",\r\n    \"Image Alt Attributes\": \"Well done! Your images are properly optimized with the keyphrase.\",\r\n    \"Internal Links\": \"Perfect! You have a good number of internal links.\",\r\n    \"Outbound Links\": \"Excellent! You've included relevant outbound links.\",\r\n  };\r\n  return messages[checkType] || \"Good job!\";\r\n}\r\n\r\n// Fallback recommendation templates\r\nconst fallbackRecommendations = {\r\n  \"Keyphrase in Title\": (keyphrase, title) => \r\n    `Consider rewriting your title to include '${keyphrase}', preferably at the beginning. Here is a better title: \"${keyphrase} - ${title}\"`,\r\n\r\n  \"Keyphrase in Meta Description\": (keyphrase, metaDescription) =>\r\n    `Add '${keyphrase}' to your meta description in a natural way that encourages clicks. Here is a better meta description: \"${metaDescription ? metaDescription.substring(0, 50) : 'Learn about'} ${keyphrase} ${metaDescription ? metaDescription.substring(50, 100) : 'and discover how it can help you'}.\"`,\r\n\r\n  \"Keyphrase in Introduction\": (keyphrase) =>\r\n    `Mention '${keyphrase}' in your first paragraph to establish relevance early.`,\r\n\r\n  \"Image Alt Attributes\": (keyphrase) =>\r\n    `Add descriptive alt text containing '${keyphrase}' to at least one relevant image.`,\r\n\r\n  \"Internal Links\": () =>\r\n    `Add links to other relevant pages on your site to improve navigation and SEO.`,\r\n\r\n  \"Outbound Links\": () =>\r\n    `Link to reputable external sources to increase your content's credibility.`,\r\n};\r\n\r\n// Scrape a webpage for SEO analysis\r\nasync function scrapeWebpage(url) {\r\n  console.log(`Scraping webpage: ${url}`);\r\n  \r\n  try {\r\n    // Add HTTPS protocol if missing\r\n    if (!url.startsWith(\"http://\") && !url.startsWith(\"https://\")) {\r\n      url = `https://${url}`;\r\n    }\r\n\r\n    // Fetch the page\r\n    const response = await fetch(url);\r\n    if (!response.ok) throw new Error(`Failed to fetch page: ${response.status} ${response.statusText}`);\r\n    \r\n    const html = await response.text();\r\n    \r\n    // Parse the HTML using Regex patterns (not ideal but works in Worker environment)\r\n    // Extract title\r\n    const titleMatch = html.match(/<title[^>]*>(.*?)<\\/title>/i);\r\n    const title = titleMatch ? titleMatch[1].trim() : \"\";\r\n    \r\n    // Extract meta description\r\n    const metaDescriptionMatch = html.match(/<meta\\s+name=[\"']description[\"']\\s+content=[\"'](.*?)[\"']/i);\r\n    const metaDescription = metaDescriptionMatch ? metaDescriptionMatch[1].trim() : \"\";\r\n    \r\n    // Extract main content text\r\n    const bodyMatch = html.match(/<body[^>]*>([\\s\\S]*)<\\/body>/i);\r\n    const bodyContent = bodyMatch ? bodyMatch[1] : \"\";\r\n    \r\n    // Strip HTML tags to get text content\r\n    const content = bodyContent.replace(/<[^>]+>/g, ' ')\r\n      .replace(/\\s+/g, ' ')\r\n      .trim();\r\n    \r\n    // Extract paragraphs\r\n    const paragraphs = [];\r\n    const paragraphMatches = bodyContent.matchAll(/<p[^>]*>(.*?)<\\/p>/gi);\r\n    for (const match of paragraphMatches) {\r\n      const text = match[1].replace(/<[^>]+>/g, ' ').trim();\r\n      if (text) paragraphs.push(text);\r\n    }\r\n    \r\n    // Extract images\r\n    const images = [];\r\n    const imageMatches = bodyContent.matchAll(/<img[^>]*src=[\"'](.*?)[\"'][^>]*alt=[\"'](.*?)[\"'][^>]*>/gi);\r\n    for (const match of imageMatches) {\r\n      images.push({\r\n        src: match[1],\r\n        alt: match[2]\r\n      });\r\n    }\r\n    \r\n    // Extract links\r\n    const baseUrl = new URL(url);\r\n    const internalLinks = [];\r\n    const outboundLinks = [];\r\n    \r\n    const linkMatches = bodyContent.matchAll(/<a[^>]*href=[\"'](.*?)[\"'][^>]*>/gi);\r\n    for (const match of linkMatches) {\r\n      try {\r\n        const href = match[1];\r\n        if (href.startsWith('#') || href.startsWith('javascript:')) continue;\r\n        \r\n        const linkUrl = new URL(href, baseUrl.origin);\r\n        \r\n        if (linkUrl.hostname === baseUrl.hostname) {\r\n          internalLinks.push(href);\r\n        } else {\r\n          outboundLinks.push(href);\r\n        }\r\n      } catch (e) {\r\n        // Skip invalid URLs\r\n      }\r\n    }\r\n    \r\n    return {\r\n      title,\r\n      metaDescription,\r\n      content,\r\n      paragraphs,\r\n      images,\r\n      internalLinks,\r\n      outboundLinks,\r\n      url\r\n    };\r\n  } catch (error) {\r\n    console.error(`Error scraping webpage: ${error.message}`);\r\n    throw new Error(`Failed to scrape webpage: ${error.message}`);\r\n  }\r\n}\r\n\r\n// Main SEO analysis function\r\nasync function analyzeSEO(url, keyphrase) {\r\n  console.log(`Analyzing SEO for URL: ${url}, keyphrase: ${keyphrase}`);\r\n  \r\n  try {\r\n    // Scrape the webpage\r\n    const scrapedData = await scrapeWebpage(url);\r\n    \r\n    // Initialize results\r\n    const checks = [];\r\n    let passedChecks = 0;\r\n    let failedChecks = 0;\r\n    \r\n    // Helper function to add check results\r\n    const addCheck = (title, description, passed, recommendation = \"\") => {\r\n      let finalDescription = passed \r\n        ? getSuccessMessage(title, url)\r\n        : description;\r\n      \r\n      let finalRecommendation = \"\";\r\n      if (!passed) {\r\n        // Use fallback recommendations\r\n        switch (title) {\r\n          case \"Keyphrase in Title\":\r\n            finalRecommendation = fallbackRecommendations[title](keyphrase, scrapedData.title);\r\n            break;\r\n          case \"Keyphrase in Meta Description\":\r\n            finalRecommendation = fallbackRecommendations[title](keyphrase, scrapedData.metaDescription);\r\n            break;\r\n          default:\r\n            if (fallbackRecommendations[title]) {\r\n              finalRecommendation = fallbackRecommendations[title](keyphrase);\r\n            } else {\r\n              finalRecommendation = `Consider optimizing your content for the keyphrase \"${keyphrase}\" in relation to ${title.toLowerCase()}.`;\r\n            }\r\n        }\r\n      }\r\n      \r\n      if (passed) {\r\n        passedChecks++;\r\n      } else {\r\n        failedChecks++;\r\n      }\r\n      \r\n      // Get priority for this check (default to medium if not found)\r\n      const priority = checkPriorities[title] || \"medium\";\r\n      \r\n      checks.push({\r\n        title,\r\n        description: finalDescription,\r\n        passed,\r\n        recommendation: finalRecommendation,\r\n        priority\r\n      });\r\n    };\r\n    \r\n    // 1. Title analysis\r\n    const titleHasKeyphrase = scrapedData.title.toLowerCase().includes(keyphrase.toLowerCase());\r\n    addCheck(\r\n      \"Keyphrase in Title\",\r\n      \"The focus keyphrase should appear in the page title\",\r\n      titleHasKeyphrase\r\n    );\r\n    \r\n    // 2. Meta description analysis\r\n    const metaDescHasKeyphrase = scrapedData.metaDescription?.toLowerCase().includes(keyphrase.toLowerCase());\r\n    addCheck(\r\n      \"Keyphrase in Meta Description\",\r\n      \"The meta description should contain the focus keyphrase\",\r\n      metaDescHasKeyphrase\r\n    );\r\n    \r\n    // 3. URL analysis\r\n    const isHome = isHomePage(url);\r\n    const slugHasKeyphrase = isHome || url.toLowerCase().includes(keyphrase.toLowerCase());\r\n    addCheck(\r\n      \"Keyphrase in URL\",\r\n      isHome\r\n        ? \"This is the homepage URL, so the keyphrase is not required in the URL \u2728\"\r\n        : \"The URL should contain the focus keyphrase\",\r\n      slugHasKeyphrase\r\n    );\r\n    \r\n    // 4. Content length\r\n    const minWordCount = 300;\r\n    const wordCount = scrapedData.content.split(/\\s+/).length;\r\n    addCheck(\r\n      \"Content Length\",\r\n      `Your content has ${wordCount} words. For good SEO, aim for at least ${minWordCount} words to provide comprehensive coverage of your topic.`,\r\n      wordCount >= minWordCount\r\n    );\r\n    \r\n    // 5. Keyphrase density\r\n    const densityResult = calculateKeyphraseDensity(scrapedData.content, keyphrase);\r\n    const goodDensity = densityResult.density >= 0.5 && densityResult.density <= 2.5;\r\n    addCheck(\r\n      \"Keyphrase Density\",\r\n      `Keyphrase density should be between 0.5% and 2.5%. Current density: ${densityResult.density.toFixed(1)}% (${densityResult.occurrences} occurrences in ${densityResult.totalWords} words)`,\r\n      goodDensity\r\n    );\r\n    \r\n    // 6. Keyphrase in first paragraph\r\n    let firstParagraph = scrapedData.paragraphs[0] || \"\";\r\n    let keyphraseInIntro = false;\r\n\r\n    if (firstParagraph) {\r\n      keyphraseInIntro = firstParagraph.toLowerCase().includes(keyphrase.toLowerCase());\r\n    }\r\n\r\n    addCheck(\r\n      \"Keyphrase in Introduction\",\r\n      \"The focus keyphrase should appear in the first paragraph to establish topic relevance early\",\r\n      keyphraseInIntro\r\n    );\r\n    \r\n    // 7. Image alt text analysis\r\n    const altTextsWithKeyphrase = scrapedData.images.some(\r\n      (img) => img.alt?.toLowerCase().includes(keyphrase.toLowerCase())\r\n    );\r\n    addCheck(\r\n      \"Image Alt Attributes\",\r\n      \"At least one image should have an alt attribute containing the focus keyphrase\",\r\n      altTextsWithKeyphrase\r\n    );\r\n    \r\n    // 8. Internal links analysis\r\n    const hasInternalLinks = scrapedData.internalLinks.length > 0;\r\n    addCheck(\r\n      \"Internal Links\",\r\n      \"The page should contain internal links to other pages\",\r\n      hasInternalLinks\r\n    );\r\n    \r\n    // 9. Outbound links analysis\r\n    const hasOutboundLinks = scrapedData.outboundLinks.length > 0;\r\n    addCheck(\r\n      \"Outbound Links\",\r\n      \"The page should contain outbound links to authoritative sources\",\r\n      hasOutboundLinks\r\n    );\r\n    \r\n    // Calculate overall score\r\n    const score = Math.round((passedChecks / checks.length) * 100);\r\n    \r\n    return {\r\n      checks,\r\n      passedChecks,\r\n      failedChecks,\r\n      url,\r\n      score,\r\n      timestamp: new Date().toISOString()\r\n    };\r\n  } catch (error) {\r\n    console.error(`Error analyzing SEO: ${error.message}`);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Worker event handler\r\naddEventListener('fetch', event => {\r\n  event.respondWith(handleRequest(event.request));\r\n});\r\n\r\nasync function handleRequest(request) {\r\n  // Handle CORS preflight requests\r\n  const corsResponse = handleCors(request);\r\n  if (corsResponse) return corsResponse;\r\n  \r\n  const url = new URL(request.url);\r\n  const path = url.pathname;\r\n  \r\n  // Get origin for CORS headers\r\n  const origin = request.headers.get('Origin');\r\n  const corsHeaders = {\r\n    'Access-Control-Allow-Origin': origin || '*',\r\n    'Content-Type': 'application/json'\r\n  };\r\n  \r\n  try {\r\n    // Handle API routes\r\n    if (path === '/api/analyze' && request.method === 'POST') {\r\n      const data = await request.json();\r\n      const { keyphrase, url } = data;\r\n      \r\n      if (!keyphrase || !url) {\r\n        return new Response(JSON.stringify({ \r\n          message: \"Keyphrase and URL are required\" \r\n        }), { \r\n          status: 400, \r\n          headers: corsHeaders \r\n        });\r\n      }\r\n      \r\n      // Perform the actual SEO analysis\r\n      const results = await analyzeSEO(url, keyphrase);\r\n      \r\n      return new Response(JSON.stringify(results), { \r\n        status: 200,\r\n        headers: corsHeaders\r\n      });\r\n    }\r\n    \r\n    else if (path === '/api/register-domains' && request.method === 'POST') {\r\n      const data = await request.json();\r\n      const { domains } = data;\r\n      \r\n      if (!domains || !Array.isArray(domains)) {\r\n        return new Response(JSON.stringify({ \r\n          success: false, \r\n          message: \"Domains array is required\" \r\n        }), { \r\n          status: 400, \r\n          headers: corsHeaders \r\n        });\r\n      }\r\n      \r\n      // In this worker implementation, we don't actually need to register domains\r\n      // since we're doing the analysis here and not forwarding to another server\r\n      return new Response(JSON.stringify({ \r\n        success: true, \r\n        message: `Successfully registered ${domains.length} domains.` \r\n      }), { \r\n        status: 200, \r\n        headers: corsHeaders \r\n      });\r\n    }\r\n    \r\n    // Handle other routes or 404\r\n    return new Response(JSON.stringify({ \r\n      message: \"Route not found\", \r\n      path \r\n    }), { \r\n      status: 404, \r\n      headers: corsHeaders \r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error(\"Error processing request:\", error);\r\n    return new Response(JSON.stringify({ \r\n      message: \"Internal server error\", \r\n      error: error.message \r\n    }), { \r\n      status: 500, \r\n      headers: corsHeaders \r\n    });\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": ["ctx", "url"]
}
