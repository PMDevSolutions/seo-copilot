{
  "version": 3,
  "sources": ["../bundle-Aer4CV/checked-fetch.js", "../../../../../AppData/Local/npm-cache/_npx/32026684e21afda6/node_modules/wrangler/templates/middleware/common.ts", "../../../../../AppData/Local/npm-cache/_npx/32026684e21afda6/node_modules/wrangler/templates/middleware/loader-sw.ts", "../../../../../AppData/Local/npm-cache/_npx/32026684e21afda6/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../../../AppData/Local/npm-cache/_npx/32026684e21afda6/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-Aer4CV/middleware-insertion-facade.js", "../../../workers/index.ts"],
  "sourceRoot": "C:\\Users\\class\\webflow-apps\\webflow-app-template-react\\.wrangler\\tmp\\dev-EBcPIR",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "import {\n\t__facade_invoke__,\n\t__facade_register__,\n\t__facade_registerInternal__,\n\tAwaitable,\n\tDispatcher,\n\tIncomingRequest,\n\tMiddleware,\n} from \"./common\";\n\nexport { __facade_register__, __facade_registerInternal__ };\n\n// Miniflare 2's `EventTarget` follows the spec and doesn't allow exceptions to\n// be caught by `dispatchEvent`. Instead it has a custom `ThrowingEventTarget`\n// class that rethrows errors from event listeners in `dispatchEvent`.\n// We'd like errors to be propagated to the top-level `addEventListener`, so\n// we'd like to use `ThrowingEventTarget`. Unfortunately, `ThrowingEventTarget`\n// isn't exposed on the global scope, but `WorkerGlobalScope` (which extends\n// `ThrowingEventTarget`) is. Therefore, we get at it in this nasty way.\nlet __FACADE_EVENT_TARGET__: EventTarget;\nif ((globalThis as any).MINIFLARE) {\n\t__FACADE_EVENT_TARGET__ = new (Object.getPrototypeOf(WorkerGlobalScope))();\n} else {\n\t__FACADE_EVENT_TARGET__ = new EventTarget();\n}\n\nfunction __facade_isSpecialEvent__(\n\ttype: string\n): type is \"fetch\" | \"scheduled\" {\n\treturn type === \"fetch\" || type === \"scheduled\";\n}\nconst __facade__originalAddEventListener__ = globalThis.addEventListener;\nconst __facade__originalRemoveEventListener__ = globalThis.removeEventListener;\nconst __facade__originalDispatchEvent__ = globalThis.dispatchEvent;\n\nglobalThis.addEventListener = function (type, listener, options) {\n\tif (__facade_isSpecialEvent__(type)) {\n\t\t__FACADE_EVENT_TARGET__.addEventListener(\n\t\t\ttype,\n\t\t\tlistener as EventListenerOrEventListenerObject,\n\t\t\toptions\n\t\t);\n\t} else {\n\t\t__facade__originalAddEventListener__(type, listener, options);\n\t}\n};\nglobalThis.removeEventListener = function (type, listener, options) {\n\tif (__facade_isSpecialEvent__(type)) {\n\t\t__FACADE_EVENT_TARGET__.removeEventListener(\n\t\t\ttype,\n\t\t\tlistener as EventListenerOrEventListenerObject,\n\t\t\toptions\n\t\t);\n\t} else {\n\t\t__facade__originalRemoveEventListener__(type, listener, options);\n\t}\n};\nglobalThis.dispatchEvent = function (event) {\n\tif (__facade_isSpecialEvent__(event.type)) {\n\t\treturn __FACADE_EVENT_TARGET__.dispatchEvent(event);\n\t} else {\n\t\treturn __facade__originalDispatchEvent__(event);\n\t}\n};\n\ndeclare global {\n\tvar addMiddleware: typeof __facade_register__;\n\tvar addMiddlewareInternal: typeof __facade_registerInternal__;\n}\nglobalThis.addMiddleware = __facade_register__;\nglobalThis.addMiddlewareInternal = __facade_registerInternal__;\n\nconst __facade_waitUntil__ = Symbol(\"__facade_waitUntil__\");\nconst __facade_response__ = Symbol(\"__facade_response__\");\nconst __facade_dispatched__ = Symbol(\"__facade_dispatched__\");\n\nclass __Facade_ExtendableEvent__ extends Event {\n\t[__facade_waitUntil__]: Awaitable<unknown>[] = [];\n\n\twaitUntil(promise: Awaitable<any>) {\n\t\tif (!(this instanceof __Facade_ExtendableEvent__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\tthis[__facade_waitUntil__].push(promise);\n\t}\n}\n\ninterface FetchEventInit extends EventInit {\n\trequest: Request;\n\tpassThroughOnException: FetchEvent[\"passThroughOnException\"];\n}\n\nclass __Facade_FetchEvent__ extends __Facade_ExtendableEvent__ {\n\t#request: Request;\n\t#passThroughOnException: FetchEvent[\"passThroughOnException\"];\n\t[__facade_response__]?: Awaitable<Response>;\n\t[__facade_dispatched__] = false;\n\n\tconstructor(type: \"fetch\", init: FetchEventInit) {\n\t\tsuper(type);\n\t\tthis.#request = init.request;\n\t\tthis.#passThroughOnException = init.passThroughOnException;\n\t}\n\n\tget request() {\n\t\treturn this.#request;\n\t}\n\n\trespondWith(response: Awaitable<Response>) {\n\t\tif (!(this instanceof __Facade_FetchEvent__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\tif (this[__facade_response__] !== undefined) {\n\t\t\tthrow new DOMException(\n\t\t\t\t\"FetchEvent.respondWith() has already been called; it can only be called once.\",\n\t\t\t\t\"InvalidStateError\"\n\t\t\t);\n\t\t}\n\t\tif (this[__facade_dispatched__]) {\n\t\t\tthrow new DOMException(\n\t\t\t\t\"Too late to call FetchEvent.respondWith(). It must be called synchronously in the event handler.\",\n\t\t\t\t\"InvalidStateError\"\n\t\t\t);\n\t\t}\n\t\tthis.stopImmediatePropagation();\n\t\tthis[__facade_response__] = response;\n\t}\n\n\tpassThroughOnException() {\n\t\tif (!(this instanceof __Facade_FetchEvent__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#passThroughOnException();\n\t}\n}\n\ninterface ScheduledEventInit extends EventInit {\n\tscheduledTime: number;\n\tcron: string;\n\tnoRetry: ScheduledEvent[\"noRetry\"];\n}\n\nclass __Facade_ScheduledEvent__ extends __Facade_ExtendableEvent__ {\n\t#scheduledTime: number;\n\t#cron: string;\n\t#noRetry: ScheduledEvent[\"noRetry\"];\n\n\tconstructor(type: \"scheduled\", init: ScheduledEventInit) {\n\t\tsuper(type);\n\t\tthis.#scheduledTime = init.scheduledTime;\n\t\tthis.#cron = init.cron;\n\t\tthis.#noRetry = init.noRetry;\n\t}\n\n\tget scheduledTime() {\n\t\treturn this.#scheduledTime;\n\t}\n\n\tget cron() {\n\t\treturn this.#cron;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledEvent__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\n__facade__originalAddEventListener__(\"fetch\", (event) => {\n\tconst ctx: ExecutionContext = {\n\t\twaitUntil: event.waitUntil.bind(event),\n\t\tpassThroughOnException: event.passThroughOnException.bind(event),\n\t};\n\n\tconst __facade_sw_dispatch__: Dispatcher = function (type, init) {\n\t\tif (type === \"scheduled\") {\n\t\t\tconst facadeEvent = new __Facade_ScheduledEvent__(\"scheduled\", {\n\t\t\t\tscheduledTime: Date.now(),\n\t\t\t\tcron: init.cron ?? \"\",\n\t\t\t\tnoRetry() {},\n\t\t\t});\n\n\t\t\t__FACADE_EVENT_TARGET__.dispatchEvent(facadeEvent);\n\t\t\tevent.waitUntil(Promise.all(facadeEvent[__facade_waitUntil__]));\n\t\t}\n\t};\n\n\tconst __facade_sw_fetch__: Middleware = function (request, _env, ctx) {\n\t\tconst facadeEvent = new __Facade_FetchEvent__(\"fetch\", {\n\t\t\trequest,\n\t\t\tpassThroughOnException: ctx.passThroughOnException,\n\t\t});\n\n\t\t__FACADE_EVENT_TARGET__.dispatchEvent(facadeEvent);\n\t\tfacadeEvent[__facade_dispatched__] = true;\n\t\tevent.waitUntil(Promise.all(facadeEvent[__facade_waitUntil__]));\n\n\t\tconst response = facadeEvent[__facade_response__];\n\t\tif (response === undefined) {\n\t\t\tthrow new Error(\"No response!\"); // TODO: proper error message\n\t\t}\n\t\treturn response;\n\t};\n\n\tevent.respondWith(\n\t\t__facade_invoke__(\n\t\t\tevent.request as IncomingRequest,\n\t\t\tglobalThis,\n\t\t\tctx,\n\t\t\t__facade_sw_dispatch__,\n\t\t\t__facade_sw_fetch__\n\t\t)\n\t);\n});\n\n__facade__originalAddEventListener__(\"scheduled\", (event) => {\n\tconst facadeEvent = new __Facade_ScheduledEvent__(\"scheduled\", {\n\t\tscheduledTime: event.scheduledTime,\n\t\tcron: event.cron,\n\t\tnoRetry: event.noRetry.bind(event),\n\t});\n\n\t__FACADE_EVENT_TARGET__.dispatchEvent(facadeEvent);\n\tevent.waitUntil(Promise.all(facadeEvent[__facade_waitUntil__]));\n});\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport { __facade_registerInternal__ } from \"C:\\\\Users\\\\class\\\\AppData\\\\Local\\\\npm-cache\\\\_npx\\\\32026684e21afda6\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\loader-sw.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"C:\\\\Users\\\\class\\\\AppData\\\\Local\\\\npm-cache\\\\_npx\\\\32026684e21afda6\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"C:\\\\Users\\\\class\\\\AppData\\\\Local\\\\npm-cache\\\\_npx\\\\32026684e21afda6\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-miniflare3-json-error.ts\";\n\t\t\t\t__facade_registerInternal__([__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default])", "export {}; // Ensure this file is treated as a module\r\n\r\n// Define Cloudflare Workers types\r\ninterface FetchEvent extends Event {\r\n  request: Request;\r\n  respondWith(response: Response | Promise<Response>): void;\r\n}\r\n\r\n// Define allowed domains for CORS\r\nconst allowedOrigins: string[] = [\r\n  'https://webflow.com', \r\n  'https://*.webflow-ext.com', \r\n  'https://*.webflow.io',\r\n  'http://localhost:1337',  // For local development\r\n  'http://localhost:5173'   // For Vite development server\r\n];\r\n\r\n// Create a pattern to test domains against\r\nconst createDomainPattern = (domain: string): RegExp => {\r\n  if (domain.includes('*')) {\r\n    return new RegExp('^' + domain.replace('*.', '([a-zA-Z0-9-]+\\\\.)?') + '$');\r\n  }\r\n  return new RegExp('^' + domain + '$');\r\n};\r\n\r\nconst originPatterns: RegExp[] = allowedOrigins.map(createDomainPattern);\r\n\r\n// Check if origin is allowed\r\nconst isAllowedOrigin = (origin: string | null): boolean => {\r\n  if (!origin) return false;\r\n  return originPatterns.some(pattern => pattern.test(origin));\r\n};\r\n\r\n// Handle CORS headers\r\nconst handleCors = (request: Request): Response | null => {\r\n  const origin = request.headers.get('Origin');\r\n  \r\n  if (!origin || !isAllowedOrigin(origin)) {\r\n    return new Response('Forbidden', { status: 403 });\r\n  }\r\n  \r\n  if (request.method === 'OPTIONS') {\r\n    return new Response(null, {\r\n      status: 204,\r\n      headers: {\r\n        'Access-Control-Allow-Origin': origin,\r\n        'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\r\n        'Access-Control-Allow-Headers': 'Content-Type',\r\n        'Access-Control-Max-Age': '86400',\r\n      }\r\n    });\r\n  }\r\n  \r\n  return null;\r\n};\r\n\r\n// =======================================\r\n// SEO ANALYSIS LOGIC\r\n// =======================================\r\n\r\nfunction escapeRegExp(str: string): string {\r\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n}\r\n\r\nfunction calculateKeyphraseDensity(content: string, keyphrase: string): {\r\n  density: number;\r\n  occurrences: number;\r\n  totalWords: number;\r\n} {\r\n  const normalizedContent = content.toLowerCase().trim();\r\n  const normalizedKeyphrase = keyphrase.toLowerCase().trim();\r\n  const escapedKeyphrase = escapeRegExp(normalizedKeyphrase);\r\n  const totalWords = normalizedContent.split(/\\s+/).filter(word => word.length > 0).length;\r\n  const regex = new RegExp(`\\\\b${escapedKeyphrase}\\\\b`, 'gi');\r\n  const matches = normalizedContent.match(regex) || [];\r\n  const occurrences = matches.length;\r\n  const density = (occurrences * (normalizedKeyphrase.split(/\\s+/).length)) / totalWords * 100;\r\n  return { density, occurrences, totalWords };\r\n}\r\n\r\nfunction isHomePage(url: string): boolean {\r\n  try {\r\n    const urlObj = new URL(url);\r\n    return urlObj.pathname === \"/\" || urlObj.pathname === \"\";\r\n  } catch {\r\n    return false;\r\n  }\r\n}\r\n\r\n// Update check types and priorities to match Home.tsx\r\nconst checkPriorities: Record<string, 'high' | 'medium' | 'low'> = {\r\n  \"Keyphrase in Title\": \"high\",\r\n  \"Keyphrase in Meta Description\": \"high\",\r\n  \"Keyphrase in URL\": \"medium\",\r\n  \"Content Length on page\": \"high\",  // Updated name\r\n  \"Keyphrase Density\": \"medium\",\r\n  \"Keyphrase in Introduction\": \"medium\",\r\n  \"Keyphrase in H1 Heading\": \"high\",\r\n  \"Keyphrase in H2 Headings\": \"medium\",\r\n  \"Heading Hierarchy\": \"high\",\r\n  \"Image Alt Attributes\": \"low\",\r\n  \"Internal Links\": \"medium\",\r\n  \"Outbound Links\": \"low\",\r\n  \"Next-Gen Image Formats\": \"low\",\r\n  \"OpenGraph Image\": \"medium\",  // Updated to OpenGraph instead of OG\r\n  \"Open Graph Title and Description\": \"medium\",  // Updated to match Home.tsx\r\n  \"Code Minification\": \"low\",\r\n  \"Schema Markup\": \"medium\",\r\n  \"Image File Size\": \"medium\"\r\n};\r\n\r\n// Update success messages with new check names\r\nfunction getSuccessMessage(checkType: string, url: string): string {\r\n  const messages: Record<string, string> = {\r\n    \"Keyphrase in Title\": \"Great job! Your title includes the target keyphrase.\",\r\n    \"Keyphrase in Meta Description\": \"Perfect! Your meta description effectively uses the keyphrase.\",\r\n    \"Keyphrase in URL\": isHomePage(url) ? \"All good here, since it's the homepage! \u2728\" : \"Excellent! Your URL is SEO-friendly with the keyphrase.\",\r\n    \"Content Length on page\": \"Well done! Your content length is good for SEO.\",\r\n    \"Keyphrase Density\": \"Perfect! Your keyphrase density is within the optimal range.\",\r\n    \"Keyphrase in Introduction\": \"Excellent! You've included the keyphrase in your introduction.\",\r\n    \"Image Alt Attributes\": \"Well done! Your images are properly optimized with the keyphrase.\",\r\n    \"Internal Links\": \"Perfect! You have a good number of internal links.\",\r\n    \"Outbound Links\": \"Excellent! You've included relevant outbound links.\",\r\n    \"Next-Gen Image Formats\": \"Excellent! Your images use modern, optimized formats.\",\r\n    \"OpenGraph Image\": \"Great job! Your page has a properly configured OpenGraph image.\",\r\n    \"Open Graph Title and Description\": \"Perfect! Open Graph title and description are well configured.\",\r\n    \"Keyphrase in H1 Heading\": \"Excellent! Your main H1 heading effectively includes the keyphrase.\",\r\n    \"Keyphrase in H2 Headings\": \"Great job! Your H2 subheadings include the keyphrase, reinforcing your topic focus.\",\r\n    \"Heading Hierarchy\": \"Great job! Your page has a proper heading tag hierarchy.\",\r\n    \"Code Minification\": \"Excellent! Your JavaScript and CSS files are properly minified for better performance.\",\r\n    \"Schema Markup\": \"Great job! Your page has schema markup implemented, making it easier for search engines to understand your content.\",\r\n    \"Image File Size\": \"Great job! All your images are well-optimized, keeping your page loading times fast.\"\r\n  };\r\n  return messages[checkType] || \"Good job!\";\r\n}\r\n\r\nconst fallbackRecommendations: Record<string, (...args: any[]) => string> = {\r\n  \"Keyphrase in Title\": (keyphrase: string, title: string) => \r\n    `Consider rewriting your title to include '${keyphrase}', preferably at the beginning. Here is a better title: \"${keyphrase} - ${title}\"`,\r\n  \"Keyphrase in Meta Description\": (keyphrase: string, metaDescription: string) =>\r\n    `Add '${keyphrase}' to your meta description in a natural way that encourages clicks. Here is a better meta description: \"${metaDescription ? metaDescription.substring(0, 50) : 'Learn about'} ${keyphrase} ${metaDescription ? metaDescription.substring(50, 100) : 'and discover how it can help you'}.\"`,\r\n  \"Keyphrase in Introduction\": (keyphrase: string) =>\r\n    `Mention '${keyphrase}' in your first paragraph to establish relevance early.`,\r\n  \"Image Alt Attributes\": (keyphrase: string) =>\r\n    `Add descriptive alt text containing '${keyphrase}' to at least one relevant image.`,\r\n  \"Internal Links\": () =>\r\n    `Add links to other relevant pages on your site to improve navigation and SEO.`,\r\n  \"Outbound Links\": () =>\r\n    `Link to reputable external sources to increase your content's credibility.`\r\n};\r\n\r\nasync function scrapeWebpage(url: string): Promise<any> {\r\n  console.log(`Scraping webpage: ${url}`);\r\n  try {\r\n    if (!url.startsWith(\"http://\") && !url.startsWith(\"https://\")) {\r\n      url = `https://${url}`;\r\n    }\r\n    const response = await fetch(url);\r\n    if (!response.ok) throw new Error(`Failed to fetch page: ${response.status} ${response.statusText}`);\r\n    const html = await response.text();\r\n    \r\n    // Extract title and meta description\r\n    const titleMatch = html.match(/<title[^>]*>(.*?)<\\/title>/i);\r\n    const title = titleMatch ? titleMatch[1].trim() : \"\";\r\n    const metaDescriptionMatch = html.match(/<meta\\s+name=[\"']description[\"']\\s+content=[\"'](.*?)[\"']/i);\r\n    const metaDescription = metaDescriptionMatch ? metaDescriptionMatch[1].trim() : \"\";\r\n    \r\n    // Extract OpenGraph metadata\r\n    const ogMetadata: Record<string, string> = {\r\n      title: \"\",\r\n      description: \"\",\r\n      image: \"\",\r\n      imageWidth: \"\",\r\n      imageHeight: \"\"\r\n    };\r\n    \r\n    // Extract OG title\r\n    const ogTitleMatch = html.match(/<meta\\s+property=[\"']og:title[\"']\\s+content=[\"'](.*?)[\"']/i);\r\n    if (ogTitleMatch) ogMetadata.title = ogTitleMatch[1].trim();\r\n    \r\n    // Extract OG description\r\n    const ogDescMatch = html.match(/<meta\\s+property=[\"']og:description[\"']\\s+content=[\"'](.*?)[\"']/i);\r\n    if (ogDescMatch) ogMetadata.description = ogDescMatch[1].trim();\r\n    \r\n    // Extract OG image\r\n    const ogImageMatch = html.match(/<meta\\s+property=[\"']og:image[\"']\\s+content=[\"'](.*?)[\"']/i);\r\n    if (ogImageMatch) ogMetadata.image = ogImageMatch[1].trim();\r\n    \r\n    // Extract OG image dimensions\r\n    const ogImageWidthMatch = html.match(/<meta\\s+property=[\"']og:image:width[\"']\\s+content=[\"'](.*?)[\"']/i);\r\n    if (ogImageWidthMatch) ogMetadata.imageWidth = ogImageWidthMatch[1].trim();\r\n    \r\n    const ogImageHeightMatch = html.match(/<meta\\s+property=[\"']og:image:height[\"']\\s+content=[\"'](.*?)[\"']/i);\r\n    if (ogImageHeightMatch) ogMetadata.imageHeight = ogImageHeightMatch[1].trim();\r\n    \r\n    // Extract body content\r\n    const bodyMatch = html.match(/<body[^>]*>([\\s\\S]*)<\\/body>/i);\r\n    const bodyContent = bodyMatch ? bodyMatch[1] : \"\";\r\n    const content = bodyContent.replace(/<[^>]+>/g, ' ').replace(/\\s+/g, ' ').trim();\r\n    \r\n    // Extract paragraphs\r\n    const paragraphs: string[] = [];\r\n    const paragraphMatches = bodyContent.matchAll(/<p[^>]*>(.*?)<\\/p>/gi);\r\n    for (const match of paragraphMatches) {\r\n      const text = match[1].replace(/<[^>]+>/g, ' ').trim();\r\n      if (text) paragraphs.push(text);\r\n    }\r\n    \r\n    // Extract headings\r\n    const headings: Array<{ level: number; text: string }> = [];\r\n    for (let i = 1; i <= 6; i++) {\r\n      const headingMatches = bodyContent.matchAll(new RegExp(`<h${i}[^>]*>(.*?)</h${i}>`, 'gi'));\r\n      for (const match of headingMatches) {\r\n        const text = match[1].replace(/<[^>]+>/g, ' ').trim();\r\n        if (text) headings.push({ level: i, text });\r\n      }\r\n    }\r\n    \r\n    // Extract images with sizes\r\n    const images: Array<{ src: string; alt: string; size?: number }> = [];\r\n    const imageMatches = bodyContent.matchAll(/<img[^>]*src=[\"'](.*?)[\"'][^>]*alt=[\"'](.*?)[\"'][^>]*>/gi);\r\n    for (const match of imageMatches) {\r\n      images.push({ src: match[1], alt: match[2] });\r\n    }\r\n    \r\n    // Extract links\r\n    const baseUrl = new URL(url);\r\n    const internalLinks: string[] = [];\r\n    const outboundLinks: string[] = [];\r\n    const linkMatches = bodyContent.matchAll(/<a[^>]*href=[\"'](.*?)[\"'][^>]*>/gi);\r\n    for (const match of linkMatches) {\r\n      try {\r\n        const href = match[1];\r\n        if (href.startsWith('#') || href.startsWith('javascript:')) continue;\r\n        const linkUrl = new URL(href, baseUrl.origin);\r\n        if (linkUrl.hostname === baseUrl.hostname) {\r\n          internalLinks.push(href);\r\n        } else {\r\n          outboundLinks.push(href);\r\n        }\r\n      } catch (e) {\r\n        // Skip invalid URLs\r\n      }\r\n    }\r\n    \r\n    // Extract JavaScript and CSS resources to check minification\r\n    const resources = {\r\n      js: [] as Array<{url: string; minified: boolean}>,\r\n      css: [] as Array<{url: string; minified: boolean}>\r\n    };\r\n    \r\n    // Extract JavaScript files\r\n    const scriptMatches = bodyContent.matchAll(/<script[^>]*src=[\"'](.*?)[\"'][^>]*>/gi);\r\n    for (const match of Array.from(scriptMatches)) {\r\n      const scriptUrl = match[1];\r\n      if (scriptUrl) {\r\n        try {\r\n          // Determine if it's external or can be fetched\r\n          let absoluteUrl = scriptUrl;\r\n          if (scriptUrl.startsWith('//')) {\r\n            absoluteUrl = `https:${scriptUrl}`;\r\n          } else if (scriptUrl.startsWith('/')) {\r\n            absoluteUrl = `${baseUrl.protocol}//${baseUrl.host}${scriptUrl}`;\r\n          } else if (!scriptUrl.startsWith('http')) {\r\n            absoluteUrl = new URL(scriptUrl, url).toString();\r\n          }\r\n          resources.js.push({\r\n            url: absoluteUrl,\r\n            minified: scriptUrl.includes('.min.js') || scriptUrl.includes('-min.js')\r\n          });\r\n        } catch (e) {\r\n          console.log(`Error processing script URL: ${scriptUrl}`, e);\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Extract inline scripts\r\n    const inlineScriptMatches = bodyContent.matchAll(/<script[^>]*>([\\s\\S]*?)<\\/script>/gi);\r\n    for (const match of Array.from(inlineScriptMatches)) {\r\n      const scriptContent = match[1]?.trim();\r\n      if (scriptContent && scriptContent.length > 0) {\r\n        // Check if script is minified by looking for newlines and multiple spaces\r\n        const isMinified = !scriptContent.includes('\\n') && \r\n                          !(/\\s{2,}/).test(scriptContent) &&\r\n                          scriptContent.length > 50;\r\n        resources.js.push({\r\n          url: 'inline-script',\r\n          minified: isMinified\r\n        });\r\n      }\r\n    }\r\n    \r\n    // Extract CSS files\r\n    const cssMatches = bodyContent.matchAll(/<link[^>]*rel=[\"']stylesheet[\"'][^>]*href=[\"'](.*?)[\"'][^>]*>/gi);\r\n    for (const match of Array.from(cssMatches)) {\r\n      const cssUrl = match[1];\r\n      if (cssUrl) {\r\n        try {\r\n          // Determine if it's external or can be fetched\r\n          let absoluteUrl = cssUrl;\r\n          if (cssUrl.startsWith('//')) {\r\n            absoluteUrl = `https:${cssUrl}`;\r\n          } else if (cssUrl.startsWith('/')) {\r\n            absoluteUrl = `${baseUrl.protocol}//${baseUrl.host}${cssUrl}`;\r\n          } else if (!cssUrl.startsWith('http')) {\r\n            absoluteUrl = new URL(cssUrl, url).toString();\r\n          }\r\n          resources.css.push({\r\n            url: absoluteUrl,\r\n            minified: cssUrl.includes('.min.css') || cssUrl.includes('-min.css')\r\n          });\r\n        } catch (e) {\r\n          console.log(`Error processing CSS URL: ${cssUrl}`, e);\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Extract inline styles\r\n    const inlineStyleMatches = bodyContent.matchAll(/<style[^>]*>([\\s\\S]*?)<\\/style>/gi);\r\n    for (const match of Array.from(inlineStyleMatches)) {\r\n      const styleContent = match[1]?.trim();\r\n      if (styleContent && styleContent.length > 0) {\r\n        // Check if style is minified\r\n        const isMinified = !styleContent.includes('\\n') && \r\n                          !(/\\s{2,}/).test(styleContent) &&\r\n                          styleContent.length > 50;\r\n        resources.css.push({\r\n          url: 'inline-style',\r\n          minified: isMinified\r\n        });\r\n      }\r\n    }\r\n    \r\n    // Check for schema.org structured data\r\n    const schema = {\r\n      detected: false,\r\n      types: [] as string[]\r\n    };\r\n    \r\n    const schemaJsonMatch = html.match(/<script\\s+type=[\"']application\\/ld\\+json[\"'][^>]*>([\\s\\S]*?)<\\/script>/i);\r\n    if (schemaJsonMatch) {\r\n      schema.detected = true;\r\n      try {\r\n        const jsonData = JSON.parse(schemaJsonMatch[1]);\r\n        if (jsonData['@type']) {\r\n          schema.types.push(jsonData['@type']);\r\n        } else if (Array.isArray(jsonData) && jsonData[0] && jsonData[0]['@type']) {\r\n          schema.types = jsonData.map(item => item['@type']).filter(Boolean);\r\n        }\r\n      } catch (e) {\r\n        console.log('Error parsing schema JSON:', e);\r\n      }\r\n    }\r\n    \r\n    return {\r\n      title,\r\n      metaDescription,\r\n      content,\r\n      paragraphs,\r\n      headings,\r\n      images,\r\n      internalLinks,\r\n      outboundLinks,\r\n      url,\r\n      ogMetadata,\r\n      resources,\r\n      schema\r\n    };\r\n  } catch (error: any) {\r\n    console.error(`Error scraping webpage: ${error.message}`);\r\n    throw new Error(`Failed to scrape webpage: ${error.message}`);\r\n  }\r\n}\r\n\r\n// Update the check title in the analyzeSEO function to match the UI\r\nasync function analyzeSEO(url: string, keyphrase: string): Promise<any> {\r\n  console.log(`Analyzing SEO for URL: ${url}, keyphrase: ${keyphrase}`);\r\n  try {\r\n    const scrapedData = await scrapeWebpage(url);\r\n    const checks: any[] = [];\r\n    let passedChecks = 0;\r\n    let failedChecks = 0;\r\n    const addCheck = (title: string, description: string, passed: boolean, recommendation = \"\") => {\r\n      let finalDescription = passed ? getSuccessMessage(title, url) : description;\r\n      let finalRecommendation = \"\";\r\n      if (!passed) {\r\n        switch (title) {\r\n          case \"Keyphrase in Title\":\r\n            finalRecommendation = fallbackRecommendations[title](keyphrase, scrapedData.title);\r\n            break;\r\n          case \"Keyphrase in Meta Description\":\r\n            finalRecommendation = fallbackRecommendations[title](keyphrase, scrapedData.metaDescription);\r\n            break;\r\n          default:\r\n            finalRecommendation = fallbackRecommendations[title] ? fallbackRecommendations[title](keyphrase) : `Consider optimizing your content for the keyphrase \"${keyphrase}\" in relation to ${title.toLowerCase()}.`;\r\n        }\r\n      }\r\n      if (passed) {\r\n        passedChecks++;\r\n      } else {\r\n        failedChecks++;\r\n      }\r\n      const priority = checkPriorities[title] || \"medium\";\r\n      checks.push({ title, description: finalDescription, passed, recommendation: finalRecommendation, priority });\r\n    };\r\n    \r\n    addCheck(\r\n      \"Keyphrase in Title\",\r\n      \"The focus keyphrase should appear in the page title\",\r\n      scrapedData.title.toLowerCase().includes(keyphrase.toLowerCase())\r\n    );\r\n    \r\n    addCheck(\r\n      \"Keyphrase in Meta Description\",\r\n      \"The meta description should contain the focus keyphrase\",\r\n      Boolean(scrapedData.metaDescription && scrapedData.metaDescription.toLowerCase().includes(keyphrase.toLowerCase()))\r\n    );\r\n    \r\n    const isHome = isHomePage(url);\r\n    addCheck(\r\n      \"Keyphrase in URL\",\r\n      isHome\r\n        ? \"This is the homepage URL, so the keyphrase is not required in the URL \u2728\"\r\n        : \"The URL should contain the focus keyphrase\",\r\n      isHome || url.toLowerCase().includes(keyphrase.toLowerCase())\r\n    );\r\n    \r\n    const minWordCount = 300;\r\n    const wordCount = scrapedData.content.split(/\\s+/).length;\r\n    addCheck(\r\n      \"Content Length on page\", // Updated name to match Home.tsx\r\n      `Your content has ${wordCount} words. For good SEO, aim for at least ${minWordCount} words to provide comprehensive coverage of your topic.`,\r\n      wordCount >= minWordCount\r\n    );\r\n    \r\n    const densityResult = calculateKeyphraseDensity(scrapedData.content, keyphrase);\r\n    addCheck(\r\n      \"Keyphrase Density\",\r\n      `Keyphrase density should be between 0.5% and 2.5%. Current density: ${densityResult.density.toFixed(1)}% (${densityResult.occurrences} occurrences in ${densityResult.totalWords} words)`,\r\n      densityResult.density >= 0.5 && densityResult.density <= 2.5\r\n    );\r\n    \r\n    const firstParagraph = scrapedData.paragraphs[0] || \"\";\r\n    addCheck(\r\n      \"Keyphrase in Introduction\",\r\n      \"The focus keyphrase should appear in the first paragraph to establish topic relevance early\",\r\n      firstParagraph.toLowerCase().includes(keyphrase.toLowerCase())\r\n    );\r\n    \r\n    // Image Alt Attributes check - Implementation instead of placeholder comment\r\n    const altTextsWithKeyphrase = scrapedData.images.some((img: { alt: string }) => img.alt?.toLowerCase().includes(keyphrase.toLowerCase()));\r\n    addCheck(\r\n      \"Image Alt Attributes\",\r\n      \"At least one image should have an alt attribute containing the focus keyphrase\",\r\n      altTextsWithKeyphrase\r\n    );\r\n    \r\n    // Internal Links check - Implementation instead of placeholder comment\r\n    const hasInternalLinks = scrapedData.internalLinks.length > 0;\r\n    addCheck(\r\n      \"Internal Links\",\r\n      \"The page should contain internal links to other pages\",\r\n      hasInternalLinks\r\n    );\r\n    \r\n    // Outbound Links check - Implementation instead of placeholder comment\r\n    const hasOutboundLinks = scrapedData.outboundLinks.length > 0;\r\n    addCheck(\r\n      \"Outbound Links\",\r\n      \"The page should contain outbound links to authoritative sources\",\r\n      hasOutboundLinks\r\n    );\r\n    \r\n    // 7. H1 Heading analysis\r\n    const h1Tags = scrapedData.headings.filter(heading => heading.level === 1);\r\n    let h1HasKeyphrase = h1Tags.some(heading =>\r\n      heading.text.toLowerCase().includes(keyphrase.toLowerCase())\r\n    );\r\n    \r\n    // If not found, check for all important words\r\n    if (!h1HasKeyphrase && h1Tags.length > 0) {\r\n      const keyphraseWords = keyphrase.toLowerCase().split(/\\s+/).filter(word => word.length > 2);\r\n      if (keyphraseWords.length > 0) {\r\n        const allWordsFoundInAnyH1 = h1Tags.some(heading => {\r\n          const headingText = heading.text.toLowerCase();\r\n          return keyphraseWords.every(word => headingText.includes(word));\r\n        });\r\n        h1HasKeyphrase = allWordsFoundInAnyH1;\r\n      }\r\n    }\r\n    \r\n    addCheck(\r\n      \"Keyphrase in H1 Heading\",\r\n      h1Tags.length === 0\r\n        ? \"Your page is missing an H1 heading. Add an H1 heading that includes your keyphrase.\"\r\n        : h1Tags.length > 1\r\n          ? \"You have multiple H1 headings. Best practice is to have a single H1 heading that includes your keyphrase.\"\r\n          : \"Your H1 heading should include your target keyphrase for optimal SEO.\",\r\n      h1HasKeyphrase && h1Tags.length === 1\r\n    );\r\n    \r\n    // 8. H2 Headings analysis\r\n    const h2Tags = scrapedData.headings.filter(heading => heading.level === 2);\r\n    let h2HasKeyphrase = h2Tags.some(heading =>\r\n      heading.text.toLowerCase().includes(keyphrase.toLowerCase())\r\n    );\r\n    \r\n    // More flexible keyword matching for H2s\r\n    if (!h2HasKeyphrase && h2Tags.length > 0) {\r\n      const keyphraseWords = keyphrase.toLowerCase().split(/\\s+/).filter(word => word.length > 2);\r\n      if (keyphraseWords.length > 0) {\r\n        const allWordsFoundInAnyH2 = h2Tags.some(heading => {\r\n          const headingText = heading.text.toLowerCase();\r\n          return keyphraseWords.every(word => headingText.includes(word));\r\n        });\r\n        h2HasKeyphrase = allWordsFoundInAnyH2;\r\n      }\r\n    }\r\n    \r\n    addCheck(\r\n      \"Keyphrase in H2 Headings\",\r\n      h2Tags.length === 0\r\n        ? \"Your page doesn't have any H2 headings. Add H2 subheadings that include your keyphrase to structure your content.\"\r\n        : \"Your H2 headings should include your target keyphrase at least once to reinforce your topic focus.\",\r\n      h2HasKeyphrase && h2Tags.length > 0\r\n    );\r\n    \r\n    // 9. Heading hierarchy check\r\n    const hasH1 = h1Tags.length > 0;\r\n    const hasH2 = h2Tags.length > 0;\r\n    const hasProperHeadingStructure = hasH1 && hasH2 && h1Tags.length === 1;\r\n    \r\n    let hasProperLevelOrder = true;\r\n    const allHeadings = [...scrapedData.headings].sort((a, b) => {\r\n      return scrapedData.headings.indexOf(a) - scrapedData.headings.indexOf(b);\r\n    });\r\n    \r\n    let prevLevel = 0;\r\n    for (const heading of allHeadings) {\r\n      if (heading.level > prevLevel + 1 && prevLevel > 0) {\r\n        hasProperLevelOrder = false;\r\n        break;\r\n      }\r\n      prevLevel = heading.level;\r\n    }\r\n    \r\n    const hasProperHeadingHierarchy = hasProperHeadingStructure && hasProperLevelOrder;\r\n    \r\n    addCheck(\r\n      \"Heading Hierarchy\",\r\n      hasProperHeadingHierarchy\r\n        ? \"Your page has a proper heading structure with a single H1 followed by appropriate subheadings.\"\r\n        : !hasH1\r\n          ? \"Your page is missing an H1 heading, which is crucial for SEO and document structure.\"\r\n          : h1Tags.length > 1\r\n            ? \"Your page has multiple H1 headings. Best practice is to have a single H1 heading per page.\"\r\n            : !hasH2\r\n              ? \"Your page is missing H2 headings. Use H2 headings to structure your content under the main H1 heading.\"\r\n              : !hasProperLevelOrder\r\n                ? \"Your heading structure skips levels (e.g., H1 followed directly by H3). This can confuse search engines and assistive technologies.\"\r\n                : \"Your heading structure needs improvement. Follow a logical hierarchy (H1 \u2192 H2 \u2192 H3) for better SEO.\",\r\n      hasProperHeadingHierarchy\r\n    );\r\n    \r\n    // 10. Open Graph Title and Description\r\n    const hasOGTitle = Boolean(scrapedData.ogMetadata.title);\r\n    const hasOGDescription = Boolean(scrapedData.ogMetadata.description);\r\n    const ogTitleLength = hasOGTitle ? scrapedData.ogMetadata.title.length : 0;\r\n    const ogDescLength = hasOGDescription ? scrapedData.ogMetadata.description.length : 0;\r\n    \r\n    const validOGMeta = hasOGTitle && hasOGDescription &&\r\n      ogTitleLength >= 10 && ogTitleLength <= 70 &&\r\n      ogDescLength >= 100 && ogDescLength <= 200;\r\n    \r\n    addCheck(\r\n      \"Open Graph Title and Description\",\r\n      validOGMeta\r\n        ? \"Open Graph title and description are properly set with optimal lengths\"\r\n        : \"Open Graph title and/or description need optimization\",\r\n      validOGMeta\r\n    );\r\n    \r\n    // 11. Open Graph Image\r\n    const hasOGImage = Boolean(scrapedData.ogMetadata.image);\r\n    const validOGImageSize = Boolean(\r\n      scrapedData.ogMetadata.imageWidth &&\r\n      scrapedData.ogMetadata.imageHeight &&\r\n      parseInt(scrapedData.ogMetadata.imageWidth) >= 1200 &&\r\n      parseInt(scrapedData.ogMetadata.imageHeight) >= 630\r\n    );\r\n    \r\n    addCheck(\r\n      \"OpenGraph Image\",\r\n      hasOGImage\r\n        ? (validOGImageSize\r\n          ? `Open Graph image is present with recommended dimensions (1200x630 or larger).`\r\n          : `Open Graph image is present but may not have the optimal dimensions.`)\r\n        : \"Open Graph image is missing. Add an OG image with dimensions of at least 1200x630px.\",\r\n      hasOGImage\r\n    );\r\n    \r\n    // 15. Schema Markup\r\n    const hasSchemaMarkup = scrapedData.schema.detected;\r\n    \r\n    addCheck(\r\n      \"Schema Markup\",\r\n      hasSchemaMarkup ?\r\n        `Your page has schema markup implemented (${scrapedData.schema.types.join(', ') || 'Unknown type'})` :\r\n        \"Your page is missing schema markup (structured data)\",\r\n      hasSchemaMarkup\r\n    );\r\n    \r\n    // Add Code Minification check\r\n    const jsResources = scrapedData.resources.js;\r\n    const cssResources = scrapedData.resources.css;\r\n\r\n    // Count resources and check minification status\r\n    const totalJsResources = jsResources.length;\r\n    const totalCssResources = cssResources.length;\r\n    const minifiedJsCount = jsResources.filter(r => r.minified).length;\r\n    const minifiedCssCount = cssResources.filter(r => r.minified).length;\r\n\r\n    // Calculate percentage of minified resources\r\n    const totalResources = totalJsResources + totalCssResources;\r\n    const minifiedResources = minifiedJsCount + minifiedCssCount;\r\n    const minificationPercentage = totalResources > 0\r\n      ? Math.round((minifiedResources / totalResources) * 100)\r\n      : 100; // If no resources, consider it 100% passed\r\n\r\n    // List of non-minified resources to provide in the recommendation\r\n    const nonMinifiedJs = jsResources\r\n      .filter(r => !r.minified && r.url !== 'inline-script')\r\n      .map(r => r.url);\r\n\r\n    const nonMinifiedCss = cssResources\r\n      .filter(r => !r.minified && r.url !== 'inline-style')\r\n      .map(r => r.url);\r\n\r\n    const hasNonMinified = nonMinifiedJs.length > 0 || nonMinifiedCss.length > 0;\r\n    const hasInlineNonMinified = jsResources.some(r => r.url === 'inline-script' && !r.minified) ||\r\n      cssResources.some(r => r.url === 'inline-style' && !r.minified);\r\n\r\n    // Create context for recommendation\r\n    let minificationRecommendation = \"\";\r\n    if (totalResources === 0) {\r\n      minificationRecommendation = \"No JavaScript or CSS resources found on the page.\";\r\n    } else {\r\n      minificationRecommendation = `Found ${totalJsResources} JavaScript and ${totalCssResources} CSS resources. `;\r\n      minificationRecommendation += `${minifiedJsCount} of ${totalJsResources} JavaScript and ${minifiedCssCount} of ${totalCssResources} CSS resources are minified. `;\r\n\r\n      if (hasInlineNonMinified) {\r\n        minificationRecommendation += `\\n\\nNon-minified inline scripts or styles detected. Consider minifying them or moving to external files.`;\r\n      }\r\n      \r\n      minificationRecommendation += `\\n\\nMinify your JavaScript and CSS files to improve page load speed. Use tools like UglifyJS, Terser, or CSSNano, or build tools like Webpack or Parcel.`;\r\n    }\r\n\r\n    // Determine if the check passes (40% or more resources minified)\r\n    const minificationPasses = minificationPercentage >= 40;\r\n\r\n    addCheck(\r\n      \"Code Minification\",\r\n      minificationPasses\r\n        ? `Your JavaScript and CSS resources are well optimized. ${minificationPercentage}% are minified.`\r\n        : `${minificationPercentage}% of your JavaScript and CSS resources are minified. Aim for at least 40% minification.`,\r\n      minificationPasses,\r\n      minificationRecommendation\r\n    );\r\n    \r\n    // If the check failed, add our custom recommendation\r\n    if (!minificationPasses) {\r\n      const minificationCheck = checks.find(check => check.title === \"Code Minification\");\r\n      if (minificationCheck) {\r\n        minificationCheck.recommendation = minificationRecommendation;\r\n      }\r\n    }\r\n    \r\n    const score = Math.round((passedChecks / checks.length) * 100);\r\n    return { checks, passedChecks, failedChecks, url, score, timestamp: new Date().toISOString() };\r\n  } catch (error: any) {\r\n    console.error(`Error analyzing SEO: ${error.message}`);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Worker event handler\r\n// @ts-ignore: Cloudflare Workers specific API\r\naddEventListener('fetch', (event: any) => {\r\n  event.respondWith(handleRequest(event.request));\r\n});\r\n\r\nasync function handleRequest(request: Request): Promise<Response> {\r\n  const corsResponse = handleCors(request);\r\n  if (corsResponse) return corsResponse;\r\n  \r\n  const url = new URL(request.url);\r\n  const path = url.pathname;\r\n  const origin = request.headers.get('Origin');\r\n  const corsHeaders = {\r\n    'Access-Control-Allow-Origin': origin || '*',\r\n    'Content-Type': 'application/json'\r\n  };\r\n  \r\n  console.log(`Handling request: ${request.method} ${path} from ${origin || 'unknown origin'}`);\r\n  \r\n  if (path === '/api/analyze' && request.method === 'HEAD') {\r\n    return new Response(null, { status: 200, headers: corsHeaders });\r\n  }\r\n  \r\n  try {\r\n    if (path === '/api/analyze' && request.method === 'POST') {\r\n      const data = await request.json();\r\n      const { keyphrase, url } = data;\r\n      if (!keyphrase || !url) {\r\n        return new Response(JSON.stringify({ message: \"Keyphrase and URL are required\" }), { status: 400, headers: corsHeaders });\r\n      }\r\n      const results = await analyzeSEO(url, keyphrase);\r\n      return new Response(JSON.stringify(results), { status: 200, headers: corsHeaders });\r\n    } else if (path === '/api/register-domains' && request.method === 'POST') {\r\n      const data = await request.json();\r\n      const { domains } = data;\r\n      if (!domains || !Array.isArray(domains)) {\r\n        return new Response(JSON.stringify({ success: false, message: \"Domains array is required\" }), { status: 400, headers: corsHeaders });\r\n      }\r\n      return new Response(JSON.stringify({ success: true, message: `Successfully registered ${domains.length} domains.` }), { status: 200, headers: corsHeaders });\r\n    }\r\n    else if (path === '/api/ping' && (request.method === 'GET' || request.method === 'HEAD')) {\r\n      return new Response(JSON.stringify({ status: 'ok', message: 'Worker is running', timestamp: new Date().toISOString() }), { status: 200, headers: corsHeaders });\r\n    }\r\n    return new Response(JSON.stringify({ message: \"Route not found\", path }), { status: 404, headers: corsHeaders });\r\n  } catch (error: any) {\r\n    console.error(\"Error processing request:\", error);\r\n    return new Response(JSON.stringify({ message: \"Internal server error\", error: error.message }), { status: 500, headers: corsHeaders });\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": ["ctx", "url"]
}
